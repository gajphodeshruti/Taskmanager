1. How did you handle inline editing in the table?
Inline editing was implemented using the editor configuration provided by Tabulator.js. For the Title and Description fields, the "input" editor was used to allow direct text editing. The Status field was configured with a "select" editor, enabling users to choose values from a predefined dropdown list ("To Do," "In Progress," "Done"). This configuration ensures easy and user-friendly inline editing.

2. Explain how you fetched and processed the data from the dummy API.
Data was fetched using axios in a useEffect hook, ensuring the request was made only when the component mounted. The API response contained tasks, but only the first 20 were processed using slice(0, 20). Each task was mapped to include title, a sample description, and the status field derived from the completed property in the API (true → "Done", false → "To Do"). This formatted data was stored in the tasks state using the useState hook.

3. What approach did you use to filter tasks based on status?
The filtering logic was implemented using the filter function on the tasks array. A filterStatus state variable was introduced to capture the user's selection from the dropdown. If filterStatus was empty, all tasks were displayed. Otherwise, only tasks matching the selected status were shown. This approach dynamically updates the displayed data without altering the original task list.

4.How did you manage the state of tasks when adding or editing them?
For adding tasks, a new task object was created based on the newTask state. The new task was assigned a unique ID by incrementing the current tasks length. The task was then appended to the tasks state using the spread operator.
For editing tasks, Tabulator.js handles inline updates directly on the data object. Any change in a cell is automatically reflected in the underlying task data managed by the tasks state.
This reactive approach ensures the UI and state remain synchronized.

5.What challenges did you face during development, and how did you overcome them?
Challenge: Integrating Tabulator.js with React required understanding how to bind state changes effectively to the table.
Solution: Used the ReactTabulator component, which provides a seamless interface for React. Also, ensured that data and columns props were linked to state variables, allowing automatic re-rendering on state updates.
Challenge: Managing task filtering and inline editing simultaneously without performance issues.
Solution: Used optimized state management and conditional rendering (filter function) to handle filtering dynamically without modifying the main dataset.

